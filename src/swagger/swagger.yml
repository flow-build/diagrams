openapi: '3.0.0'
info:
  version: 1.5.0
  title: Diagrams API
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
paths:
  /diagram:
    post:
      tags:
      - diagram
      summary: Save new diagram
      description: >
        Create a new diagram
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Diagram name
                xml:
                  type: xml
                  description: Diagram xml
                workflowId:
                  type: string
                  format: uuid
                  description: Id of diagram's workflow
                isDefault:
                  type: boolean
                  description: Set if the diagram is default
                isPublic:
                  type: boolean
                  description: Set if the diagram is public
              required:
                - name
                - xml
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  type:
                    type: string
                  userId:
                    type: string
                  isDefault:
                    type: boolean
                  isPublic:
                    type: boolean
                  createdAt:
                    type: string
              example:
                {
                  "id": "fedd708b-23fd-49e2-9e84-cdf6c60a68fc",
                  "name": "test",
                  "type": "standard",
                  "userId": "6b218d89-5cba-4443-a218-005ab926cb3e",
                  "isDefault": false,
                  "isPublic": null,
                  "createdAt": "2023-05-12T20:11:18.413Z"
                }
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                {
                  "message": "Invalid Request Body",
                  "error": [
                    {
                        "field": "",
                        "message": "must have required property 'name'"
                    }
                  ]
                }
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
    get:
      tags:
      - diagram
      summary: Get all diagrams
      description: >
        Get all diagrams from server
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    name:
                      type: string
                    type:
                      type: string
                    userId:
                      type: string
                    workflowId:
                      type: string
                      format: uuid
                    isDefault:
                      type: boolean
                    isPublic:
                      type: boolean
                    createdAt:
                      type: string
                    updatedAt:
                      type: string
              example:
                [
                  {
                    "id": "8f19a9a0-10b8-4a06-b2db-34311d28987d",
                    "name": "diagramOne",
                    "type": "usertask",
                    "userId": null,
                    "isDefault": false,
                    "isPublic": true,
                    "workflowId": "b0e175e1-f0eb-11ed-a912-956757768b67",
                    "createdAt": "2023-05-12T19:12:49.282Z",
                    "updatedAt": "2023-05-12T19:12:49.287Z"
                  },
                  {
                    "id": "b51f3e77-d95f-4f9f-9e8b-38ce8de4ed92",
                    "name": "diagramTwo",
                    "type": "nobags",
                    "userId": null,
                    "isDefault": false,
                    "isPublic": true,
                    "workflowId": "b0e175e1-f0eb-11ed-a912-956757768b67",
                    "createdAt": "2023-05-12T19:12:49.253Z",
                    "updatedAt": "2023-05-12T19:12:49.258Z"
                  },
                ]
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
  /diagram/{id}:
    get:
      tags:
      - diagram
      summary: Get diagram by id
      description: >
        Get a specific diagram xml by the diagram id
      parameters:
        - in: path
          name: id
          description: Diagram id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            text/html; charset=utf-8:
              example: <?xml version="1.0" encoding="UTF-8"?><bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:bioc="http://bpmn.io/schema/bpmn/biocolor/1.0" xmlns:color="http://www.omg.org/spec/BPMN/non-normative/color/1.0" xmlns:di="http://www.omg.org/spec/DD/20100524/DI"><bpmn:process id="Global_Process" isExecutable="true"><bpmn:laneSet id="Global_LaneSet"><bpmn:lane id="Lane_anyone" name="anyone"><bpmn:flowNodeRef>Node_START</bpmn:flowNodeRef><bpmn:flowNodeRef>Node_BAG</bpmn:flowNodeRef><bpmn:flowNodeRef>Node_END</bpmn:flowNodeRef></bpmn:lane></bpmn:laneSet><bpmn:startEvent xmlns:custom="http://custom/ns" id="Node_START" name="Start Example" custom:parameters="{&#39;timeout&#39;:100,&#39;input_schema&#39;:{}}"><bpmn:outgoing>Flow_START_BAG</bpmn:outgoing></bpmn:startEvent><bpmn:serviceTask xmlns:custom="http://custom/ns" id="Node_BAG" name="Set to bag" custom:parameters="{&#39;input&#39;:{&#39;user_id&#39;:&#39;1&#39;}}" custom:category="settobag"><bpmn:incoming>Flow_START_BAG</bpmn:incoming><bpmn:outgoing>Flow_BAG_END</bpmn:outgoing></bpmn:serviceTask><bpmn:endEvent xmlns:custom="http://custom/ns" id="Node_END" name="END" custom:parameters="{}"><bpmn:incoming>Flow_BAG_END</bpmn:incoming></bpmn:endEvent><bpmn:sequenceFlow id="Flow_START_BAG" sourceRef="Node_START" targetRef="Node_BAG" /><bpmn:sequenceFlow id="Flow_BAG_END" sourceRef="Node_BAG" targetRef="Node_END" /></bpmn:process><bpmn:collaboration id="Global_Colab" workflowId="gUv_xxzmOJx5lMYzrxYZh"><bpmn:participant id="Global_Actor" name="DIAGRAM_EXAMPLE" processRef="Global_Process" /></bpmn:collaboration><bpmndi:BPMNDiagram id="Global_Diagram"><bpmndi:BPMNPlane id="Global_Plane" bpmnElement="Global_Colab"><bpmndi:BPMNShape id="Node_START_di" bpmnElement="Node_START"><dc:Bounds x="114" y="72" width="36" height="36" /></bpmndi:BPMNShape><bpmndi:BPMNShape id="Node_BAG_di" bpmnElement="Node_BAG" bioc:stroke="#fb8c00" bioc:fill="#ffe0b2" color:background-color="#ffe0b2" color:border-color="#fb8c00"><dc:Bounds x="180" y="50" width="100" height="80" /></bpmndi:BPMNShape><bpmndi:BPMNShape id="Node_END_di" bpmnElement="Node_END"><dc:Bounds x="310" y="72" width="36" height="36" /></bpmndi:BPMNShape><bpmndi:BPMNEdge id="Flow_START_BAG_di" bpmnElement="Flow_START_BAG"><di:waypoint x="150" y="90" /><di:waypoint x="160" y="90" /><di:waypoint x="160" y="90" /><di:waypoint x="180" y="90" /></bpmndi:BPMNEdge><bpmndi:BPMNEdge id="Flow_BAG_END_di" bpmnElement="Flow_BAG_END"><di:waypoint x="280" y="90" /><di:waypoint x="290" y="90" /><di:waypoint x="290" y="90" /><di:waypoint x="310" y="90" /></bpmndi:BPMNEdge><bpmndi:BPMNShape id="Lane_anyone_di" bpmnElement="Lane_anyone"><dc:Bounds x="80" y="10" width="360" height="160" /></bpmndi:BPMNShape><bpmndi:BPMNShape id="Global_Actor_di" bpmnElement="Global_Actor"><dc:Bounds x="50" y="10" width="390" height="160" /></bpmndi:BPMNShape></bpmndi:BPMNPlane></bpmndi:BPMNDiagram></bpmn:definitions>
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                {
                  "message": "Invalid uuid"
                }
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                {
                  "message": "Diagram not found"
                }
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
    patch:
      tags:
      - diagram
      summary: Update a diagram by id
      description: >
        Update a specific diagram by the diagram id
      parameters:
        - in: path
          name: id
          description: Diagram id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Diagram name
                xml:
                  type: xml
                  description: Diagram xml
                workflowId:
                  type: string
                  format: uuid
                  description: Id of diagram's workflow
                isDefault:
                  type: boolean
                  description: Set if the diagram is default
                isPublic:
                  type: boolean
                  description: Set if the diagram is public
              required:
                - name
                - xml
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  type:
                    type: string
                  userId:
                    type: string
                  isDefault:
                    type: boolean
                  isPublic:
                    type: boolean
                  createdAt:
                    type: string
                  updatedAt:
                    type: string
              example:
                {
                  "id": "fedd708b-23fd-49e2-9e84-cdf6c60a68fc",
                  "name": "Updated",
                  "type": "standard",
                  "userId": "6b218d89-5cba-4443-a218-005ab926cb3e",
                  "isDefault": false,
                  "isPublic": null,
                  "createdAt": "2023-05-12T20:11:18.461Z",
                  "updatedAt": "2023-05-12T20:17:33.863Z"
                }
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                {
                  "message": "Invalid Request Body",
                  "errors": [
                    {
                      "field": "",
                      "message": "must have required property 'name'"
                    },
                    {
                      "field": "",
                      "message": "must have required property 'xml'"
                    },
                    {
                      "field": "",
                      "message": "must match a schema in anyOf"
                    },
                    {
                      "field": "",
                      "message": "must pass \"anyRequired\" keyword validation"
                    }
                  ]
                }
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                {
                  "message": "Diagram not found"
                }
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
    delete:
      tags:
      - diagram
      summary: Delete diagram by id
      description: >
        Delete a specific diagram by the diagram id
      parameters:
        - in: path
          name: id
          description: Diagram id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                {
                  "message": "Invalid uuid"
                }
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                {
                  "message": "Diagram not found"
                }
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
  /workflow:
    post:
      tags:
        - workflow
      summary: Build a diagram by the given blueprint_spec
      description: Build a diagram by the given blueprint_spec
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Blueprint name
                description:
                  type: string
                  description: Blueprint description
                blueprint_spec:
                  description: Blueprint spec
                  type: object
                  properties:
                    lanes:
                      type: array
                      items:
                        type: object
                    nodes:
                      type: array
                      items:
                        type: object
                  required:
                    - lanes
                    - nodes
              required:
                - blueprint_spec

      responses:
        '200':
          description: OK
          content:
            text/html; charset=utf-8:
              example: <?xml version="1.0" encoding="UTF-8"?><bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:bioc="http://bpmn.io/schema/bpmn/biocolor/1.0" xmlns:color="http://www.omg.org/spec/BPMN/non-normative/color/1.0" xmlns:di="http://www.omg.org/spec/DD/20100524/DI"><bpmn:process id="Global_Process" isExecutable="true"><bpmn:laneSet id="Global_LaneSet"><bpmn:lane id="Lane_anyone" name="anyone"><bpmn:flowNodeRef>Node_START</bpmn:flowNodeRef><bpmn:flowNodeRef>Node_BAG</bpmn:flowNodeRef><bpmn:flowNodeRef>Node_END</bpmn:flowNodeRef></bpmn:lane></bpmn:laneSet><bpmn:startEvent xmlns:custom="http://custom/ns" id="Node_START" name="Start Example" custom:parameters="{&#39;timeout&#39;:100,&#39;input_schema&#39;:{}}"><bpmn:outgoing>Flow_START_BAG</bpmn:outgoing></bpmn:startEvent><bpmn:serviceTask xmlns:custom="http://custom/ns" id="Node_BAG" name="Set to bag" custom:parameters="{&#39;input&#39;:{&#39;user_id&#39;:&#39;1&#39;}}" custom:category="settobag"><bpmn:incoming>Flow_START_BAG</bpmn:incoming><bpmn:outgoing>Flow_BAG_END</bpmn:outgoing></bpmn:serviceTask><bpmn:endEvent xmlns:custom="http://custom/ns" id="Node_END" name="END" custom:parameters="{}"><bpmn:incoming>Flow_BAG_END</bpmn:incoming></bpmn:endEvent><bpmn:sequenceFlow id="Flow_START_BAG" sourceRef="Node_START" targetRef="Node_BAG" /><bpmn:sequenceFlow id="Flow_BAG_END" sourceRef="Node_BAG" targetRef="Node_END" /></bpmn:process><bpmn:collaboration id="Global_Colab" workflowId="gUv_xxzmOJx5lMYzrxYZh"><bpmn:participant id="Global_Actor" name="DIAGRAM_EXAMPLE" processRef="Global_Process" /></bpmn:collaboration><bpmndi:BPMNDiagram id="Global_Diagram"><bpmndi:BPMNPlane id="Global_Plane" bpmnElement="Global_Colab"><bpmndi:BPMNShape id="Node_START_di" bpmnElement="Node_START"><dc:Bounds x="114" y="72" width="36" height="36" /></bpmndi:BPMNShape><bpmndi:BPMNShape id="Node_BAG_di" bpmnElement="Node_BAG" bioc:stroke="#fb8c00" bioc:fill="#ffe0b2" color:background-color="#ffe0b2" color:border-color="#fb8c00"><dc:Bounds x="180" y="50" width="100" height="80" /></bpmndi:BPMNShape><bpmndi:BPMNShape id="Node_END_di" bpmnElement="Node_END"><dc:Bounds x="310" y="72" width="36" height="36" /></bpmndi:BPMNShape><bpmndi:BPMNEdge id="Flow_START_BAG_di" bpmnElement="Flow_START_BAG"><di:waypoint x="150" y="90" /><di:waypoint x="160" y="90" /><di:waypoint x="160" y="90" /><di:waypoint x="180" y="90" /></bpmndi:BPMNEdge><bpmndi:BPMNEdge id="Flow_BAG_END_di" bpmnElement="Flow_BAG_END"><di:waypoint x="280" y="90" /><di:waypoint x="290" y="90" /><di:waypoint x="290" y="90" /><di:waypoint x="310" y="90" /></bpmndi:BPMNEdge><bpmndi:BPMNShape id="Lane_anyone_di" bpmnElement="Lane_anyone"><dc:Bounds x="80" y="10" width="360" height="160" /></bpmndi:BPMNShape><bpmndi:BPMNShape id="Global_Actor_di" bpmnElement="Global_Actor"><dc:Bounds x="50" y="10" width="390" height="160" /></bpmndi:BPMNShape></bpmndi:BPMNPlane></bpmndi:BPMNDiagram></bpmn:definitions>
        '500':
          description: Internal Server Error
  /workflow/nobags:
    post:
      tags:
        - workflow
      summary: Build a diagram without setToBag nodes by the given blueprint_spec
      description: Build a diagram without setToBag nodes by the given blueprint_spec
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Blueprint name
                description:
                  type: string
                  description: Blueprint description
                blueprint_spec:
                  description: Blueprint spec
                  type: object
                  properties:
                    lanes:
                      type: array
                      items:
                        type: object
                    nodes:
                      type: array
                      items:
                        type: object
                  required:
                    - lanes
                    - nodes
              required:
                - blueprint_spec

      responses:
        '200':
          description: OK
          content:
            text/html; charset=utf-8:
              example: <?xml version="1.0" encoding="UTF-8"?><bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:bioc="http://bpmn.io/schema/bpmn/biocolor/1.0" xmlns:color="http://www.omg.org/spec/BPMN/non-normative/color/1.0" xmlns:di="http://www.omg.org/spec/DD/20100524/DI"><bpmn:process id="Global_Process" isExecutable="true"><bpmn:laneSet id="Global_LaneSet"><bpmn:lane id="Lane_anyone" name="anyone"><bpmn:flowNodeRef>Node_START</bpmn:flowNodeRef><bpmn:flowNodeRef>Node_BAG</bpmn:flowNodeRef><bpmn:flowNodeRef>Node_END</bpmn:flowNodeRef></bpmn:lane></bpmn:laneSet><bpmn:startEvent xmlns:custom="http://custom/ns" id="Node_START" name="Start Example" custom:parameters="{&#39;timeout&#39;:100,&#39;input_schema&#39;:{}}"><bpmn:outgoing>Flow_START_BAG</bpmn:outgoing></bpmn:startEvent><bpmn:serviceTask xmlns:custom="http://custom/ns" id="Node_BAG" name="Set to bag" custom:parameters="{&#39;input&#39;:{&#39;user_id&#39;:&#39;1&#39;}}" custom:category="settobag"><bpmn:incoming>Flow_START_BAG</bpmn:incoming><bpmn:outgoing>Flow_BAG_END</bpmn:outgoing></bpmn:serviceTask><bpmn:endEvent xmlns:custom="http://custom/ns" id="Node_END" name="END" custom:parameters="{}"><bpmn:incoming>Flow_BAG_END</bpmn:incoming></bpmn:endEvent><bpmn:sequenceFlow id="Flow_START_BAG" sourceRef="Node_START" targetRef="Node_BAG" /><bpmn:sequenceFlow id="Flow_BAG_END" sourceRef="Node_BAG" targetRef="Node_END" /></bpmn:process><bpmn:collaboration id="Global_Colab" workflowId="gUv_xxzmOJx5lMYzrxYZh"><bpmn:participant id="Global_Actor" name="DIAGRAM_EXAMPLE" processRef="Global_Process" /></bpmn:collaboration><bpmndi:BPMNDiagram id="Global_Diagram"><bpmndi:BPMNPlane id="Global_Plane" bpmnElement="Global_Colab"><bpmndi:BPMNShape id="Node_START_di" bpmnElement="Node_START"><dc:Bounds x="114" y="72" width="36" height="36" /></bpmndi:BPMNShape><bpmndi:BPMNShape id="Node_BAG_di" bpmnElement="Node_BAG" bioc:stroke="#fb8c00" bioc:fill="#ffe0b2" color:background-color="#ffe0b2" color:border-color="#fb8c00"><dc:Bounds x="180" y="50" width="100" height="80" /></bpmndi:BPMNShape><bpmndi:BPMNShape id="Node_END_di" bpmnElement="Node_END"><dc:Bounds x="310" y="72" width="36" height="36" /></bpmndi:BPMNShape><bpmndi:BPMNEdge id="Flow_START_BAG_di" bpmnElement="Flow_START_BAG"><di:waypoint x="150" y="90" /><di:waypoint x="160" y="90" /><di:waypoint x="160" y="90" /><di:waypoint x="180" y="90" /></bpmndi:BPMNEdge><bpmndi:BPMNEdge id="Flow_BAG_END_di" bpmnElement="Flow_BAG_END"><di:waypoint x="280" y="90" /><di:waypoint x="290" y="90" /><di:waypoint x="290" y="90" /><di:waypoint x="310" y="90" /></bpmndi:BPMNEdge><bpmndi:BPMNShape id="Lane_anyone_di" bpmnElement="Lane_anyone"><dc:Bounds x="80" y="10" width="360" height="160" /></bpmndi:BPMNShape><bpmndi:BPMNShape id="Global_Actor_di" bpmnElement="Global_Actor"><dc:Bounds x="50" y="10" width="390" height="160" /></bpmndi:BPMNShape></bpmndi:BPMNPlane></bpmndi:BPMNDiagram></bpmn:definitions>
        '500':
          description: Internal Server Error
  /workflow/usertask:
    post:
      tags:
        - workflow
      summary: Build a diagram with only start, flow, finish, userTask, timer and event nodes
      description: Build a diagram with only start, flow, finish, userTask, timer and event nodes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Blueprint name
                description:
                  type: string
                  description: Blueprint description
                blueprint_spec:
                  description: Blueprint spec
                  type: object
                  properties:
                    lanes:
                      type: array
                      items:
                        type: object
                    nodes:
                      type: array
                      items:
                        type: object
                  required:
                    - lanes
                    - nodes
              required:
                - blueprint_spec

      responses:
        '200':
          description: OK
          content:
            text/html; charset=utf-8:
              example: <?xml version="1.0" encoding="UTF-8"?><bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:bioc="http://bpmn.io/schema/bpmn/biocolor/1.0" xmlns:color="http://www.omg.org/spec/BPMN/non-normative/color/1.0" xmlns:di="http://www.omg.org/spec/DD/20100524/DI"><bpmn:process id="Global_Process" isExecutable="true"><bpmn:laneSet id="Global_LaneSet"><bpmn:lane id="Lane_anyone" name="anyone"><bpmn:flowNodeRef>Node_START</bpmn:flowNodeRef><bpmn:flowNodeRef>Node_BAG</bpmn:flowNodeRef><bpmn:flowNodeRef>Node_END</bpmn:flowNodeRef></bpmn:lane></bpmn:laneSet><bpmn:startEvent xmlns:custom="http://custom/ns" id="Node_START" name="Start Example" custom:parameters="{&#39;timeout&#39;:100,&#39;input_schema&#39;:{}}"><bpmn:outgoing>Flow_START_BAG</bpmn:outgoing></bpmn:startEvent><bpmn:serviceTask xmlns:custom="http://custom/ns" id="Node_BAG" name="Set to bag" custom:parameters="{&#39;input&#39;:{&#39;user_id&#39;:&#39;1&#39;}}" custom:category="settobag"><bpmn:incoming>Flow_START_BAG</bpmn:incoming><bpmn:outgoing>Flow_BAG_END</bpmn:outgoing></bpmn:serviceTask><bpmn:endEvent xmlns:custom="http://custom/ns" id="Node_END" name="END" custom:parameters="{}"><bpmn:incoming>Flow_BAG_END</bpmn:incoming></bpmn:endEvent><bpmn:sequenceFlow id="Flow_START_BAG" sourceRef="Node_START" targetRef="Node_BAG" /><bpmn:sequenceFlow id="Flow_BAG_END" sourceRef="Node_BAG" targetRef="Node_END" /></bpmn:process><bpmn:collaboration id="Global_Colab" workflowId="gUv_xxzmOJx5lMYzrxYZh"><bpmn:participant id="Global_Actor" name="DIAGRAM_EXAMPLE" processRef="Global_Process" /></bpmn:collaboration><bpmndi:BPMNDiagram id="Global_Diagram"><bpmndi:BPMNPlane id="Global_Plane" bpmnElement="Global_Colab"><bpmndi:BPMNShape id="Node_START_di" bpmnElement="Node_START"><dc:Bounds x="114" y="72" width="36" height="36" /></bpmndi:BPMNShape><bpmndi:BPMNShape id="Node_BAG_di" bpmnElement="Node_BAG" bioc:stroke="#fb8c00" bioc:fill="#ffe0b2" color:background-color="#ffe0b2" color:border-color="#fb8c00"><dc:Bounds x="180" y="50" width="100" height="80" /></bpmndi:BPMNShape><bpmndi:BPMNShape id="Node_END_di" bpmnElement="Node_END"><dc:Bounds x="310" y="72" width="36" height="36" /></bpmndi:BPMNShape><bpmndi:BPMNEdge id="Flow_START_BAG_di" bpmnElement="Flow_START_BAG"><di:waypoint x="150" y="90" /><di:waypoint x="160" y="90" /><di:waypoint x="160" y="90" /><di:waypoint x="180" y="90" /></bpmndi:BPMNEdge><bpmndi:BPMNEdge id="Flow_BAG_END_di" bpmnElement="Flow_BAG_END"><di:waypoint x="280" y="90" /><di:waypoint x="290" y="90" /><di:waypoint x="290" y="90" /><di:waypoint x="310" y="90" /></bpmndi:BPMNEdge><bpmndi:BPMNShape id="Lane_anyone_di" bpmnElement="Lane_anyone"><dc:Bounds x="80" y="10" width="360" height="160" /></bpmndi:BPMNShape><bpmndi:BPMNShape id="Global_Actor_di" bpmnElement="Global_Actor"><dc:Bounds x="50" y="10" width="390" height="160" /></bpmndi:BPMNShape></bpmndi:BPMNPlane></bpmndi:BPMNDiagram></bpmn:definitions>
        '500':
          description: Internal Server Error
  /workflow/{id}:
    get:
      tags:
      - workflow
      summary: Get all diagrams for workflow id
      description: >
        Get all diagrams for workflow id
      parameters:
        - in: path
          name: id
          description: Workflow id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    name:
                      type: string
                    type:
                      type: string
                    userId:
                      type: string
                    workflowId:
                      type: string
                      format: uuid
                    isDefault:
                      type: boolean
                    isPublic:
                      type: boolean
                    createdAt:
                      type: string
                    updatedAt:
                      type: string
              example:
                [
                  {
                    "id": "8f19a9a0-10b8-4a06-b2db-34311d28987d",
                    "name": "diagramOne",
                    "type": "usertask",
                    "userId": null,
                    "isDefault": false,
                    "isPublic": true,
                    "workflowId": "b0e175e1-f0eb-11ed-a912-956757768b67",
                    "createdAt": "2023-05-12T19:12:49.282Z",
                    "updatedAt": "2023-05-12T19:12:49.287Z"
                  },
                  {
                    "id": "b51f3e77-d95f-4f9f-9e8b-38ce8de4ed92",
                    "name": "diagramTwo",
                    "type": "nobags",
                    "userId": null,
                    "isDefault": false,
                    "isPublic": true,
                    "workflowId": "b0e175e1-f0eb-11ed-a912-956757768b67",
                    "createdAt": "2023-05-12T19:12:49.253Z",
                    "updatedAt": "2023-05-12T19:12:49.258Z"
                  },
                ]
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                {
                  "message": "No diagram with workflow_id: ca78b391-d937-11ed-8082-8dae5ebf27f6"
                }
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
  /workflow/{id}/default:
    get:
      tags:
      - workflow
      summary: Get default diagram for workflow id
      description: >
        Get default diagram for workflow id
      parameters:
        - in: path
          name: id
          description: Workflow id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            text/html; charset=utf-8:
              example: <?xml version="1.0" encoding="UTF-8"?><bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:bioc="http://bpmn.io/schema/bpmn/biocolor/1.0" xmlns:color="http://www.omg.org/spec/BPMN/non-normative/color/1.0" xmlns:di="http://www.omg.org/spec/DD/20100524/DI"><bpmn:process id="Global_Process" isExecutable="true"><bpmn:laneSet id="Global_LaneSet"><bpmn:lane id="Lane_anyone" name="anyone"><bpmn:flowNodeRef>Node_START</bpmn:flowNodeRef><bpmn:flowNodeRef>Node_BAG</bpmn:flowNodeRef><bpmn:flowNodeRef>Node_END</bpmn:flowNodeRef></bpmn:lane></bpmn:laneSet><bpmn:startEvent xmlns:custom="http://custom/ns" id="Node_START" name="Start Example" custom:parameters="{&#39;timeout&#39;:100,&#39;input_schema&#39;:{}}"><bpmn:outgoing>Flow_START_BAG</bpmn:outgoing></bpmn:startEvent><bpmn:serviceTask xmlns:custom="http://custom/ns" id="Node_BAG" name="Set to bag" custom:parameters="{&#39;input&#39;:{&#39;user_id&#39;:&#39;1&#39;}}" custom:category="settobag"><bpmn:incoming>Flow_START_BAG</bpmn:incoming><bpmn:outgoing>Flow_BAG_END</bpmn:outgoing></bpmn:serviceTask><bpmn:endEvent xmlns:custom="http://custom/ns" id="Node_END" name="END" custom:parameters="{}"><bpmn:incoming>Flow_BAG_END</bpmn:incoming></bpmn:endEvent><bpmn:sequenceFlow id="Flow_START_BAG" sourceRef="Node_START" targetRef="Node_BAG" /><bpmn:sequenceFlow id="Flow_BAG_END" sourceRef="Node_BAG" targetRef="Node_END" /></bpmn:process><bpmn:collaboration id="Global_Colab" workflowId="gUv_xxzmOJx5lMYzrxYZh"><bpmn:participant id="Global_Actor" name="DIAGRAM_EXAMPLE" processRef="Global_Process" /></bpmn:collaboration><bpmndi:BPMNDiagram id="Global_Diagram"><bpmndi:BPMNPlane id="Global_Plane" bpmnElement="Global_Colab"><bpmndi:BPMNShape id="Node_START_di" bpmnElement="Node_START"><dc:Bounds x="114" y="72" width="36" height="36" /></bpmndi:BPMNShape><bpmndi:BPMNShape id="Node_BAG_di" bpmnElement="Node_BAG" bioc:stroke="#fb8c00" bioc:fill="#ffe0b2" color:background-color="#ffe0b2" color:border-color="#fb8c00"><dc:Bounds x="180" y="50" width="100" height="80" /></bpmndi:BPMNShape><bpmndi:BPMNShape id="Node_END_di" bpmnElement="Node_END"><dc:Bounds x="310" y="72" width="36" height="36" /></bpmndi:BPMNShape><bpmndi:BPMNEdge id="Flow_START_BAG_di" bpmnElement="Flow_START_BAG"><di:waypoint x="150" y="90" /><di:waypoint x="160" y="90" /><di:waypoint x="160" y="90" /><di:waypoint x="180" y="90" /></bpmndi:BPMNEdge><bpmndi:BPMNEdge id="Flow_BAG_END_di" bpmnElement="Flow_BAG_END"><di:waypoint x="280" y="90" /><di:waypoint x="290" y="90" /><di:waypoint x="290" y="90" /><di:waypoint x="310" y="90" /></bpmndi:BPMNEdge><bpmndi:BPMNShape id="Lane_anyone_di" bpmnElement="Lane_anyone"><dc:Bounds x="80" y="10" width="360" height="160" /></bpmndi:BPMNShape><bpmndi:BPMNShape id="Global_Actor_di" bpmnElement="Global_Actor"><dc:Bounds x="50" y="10" width="390" height="160" /></bpmndi:BPMNShape></bpmndi:BPMNPlane></bpmndi:BPMNDiagram></bpmn:definitions>
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                {
                  "message": "Invalid uuid"
                }
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                {
                  "message": "No diagram with workflow_id: ca78b391-d937-11ed-8082-8dae5ebf27f6"
                }
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
  /server:
    post:
      tags:
      - server
      summary: Save new server
      description: >
        Create a new server
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Server name
                url:
                  type: string
                  description: Server xml
                namespace:
                  type: string
                  description: Server namespace
                config:
                  type: object
                  description: Server configuration
              required:
                - url
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  url:
                    type: string
                  namespace:
                    type: string
                  syncing:
                    type: boolean
                  config:
                    type: 
                      - object
                      - null
              example:
                {
                  "id": "c01f5c21-f6a6-4a03-8679-d776feb80378",
                  "url": "https://flowbuild-dev.com",
                  "namespace": "dev",
                  "syncing": false,
                  "config": null
                }
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                {
                  "message": "Server already saved with url 'https://flowbuild-dev.com'"
                }
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
    get:
      tags:
      - server
      summary: Get all servers
      description: >
        Get all servers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    url:
                      type: string
                    namespace:
                      type: string
                    syncing:
                      type: boolean
                    lastSync:
                      type:
                        - string
                        - null
                    config:
                      type: 
                        - object
                        - null
              example:
                [
                  {
                    "id": "c01f5c21-f6a6-4a03-8679-d776feb80378",
                    "url": "https://flowbuild-fscustomer.bunnyenv.com",
                    "namespace": "fscustomer",
                    "syncing": false,
                    "config": null,
                    "lastSync": null
                  },
                  {
                    "id": "1c8f314b-5421-40cb-9a5b-73fca821c88f",
                    "url": "http://localhost:8082",
                    "namespace": "localhost",
                    "syncing": false,
                    "config": null,
                    "lastSync": null
                  }
                ]
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
  /server/{id}/sync:
    post:
      tags:
      - server
      summary: Sync server
      description: Sync server
      parameters:
        - in: path
          name: id
          description: Server id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  server:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      url:
                        type: string
                      namespace:
                        type: string
                      config:
                        type:
                          - object
                          - null
                      lastSync:
                        type:
                          - string
                          - null
                      syncing:
                        type: boolean
              example:
                {
                  "message": "Sync server queued",
                  "server": {
                    "id": "c01f5c21-f6a6-4a03-8679-d776feb80378",
                    "url": "https://flowbuild-fscustomer.bunnyenv.com",
                    "namespace": "fscustomer",
                    "syncing": true,
                    "config": null,
                    "lastSync": null
                  }
                }
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                {
                  "message": "Invalid uuid"
                }
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                {
                  "message": "Server not found"
                }
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                {
                  "message": "Error trying to connect to server http://localhost:8082"
                }
  /server/{id}:
    delete:
      tags:
      - server
      summary: Delete server and diagrams/workflows related
      description: >
        Delete server and diagrams/workflows related
      parameters:
        - in: path
          name: id
          description: Server id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                {
                  "message": "Invalid uuid"
                }
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                {
                  "message": "Server not found"
                }
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error